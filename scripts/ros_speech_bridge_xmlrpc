#!/usr/bin/env python

import rospy

from hmi_server.abstract_server import AbstractHMIServer
from hmi_msgs.msg import QueryAction, Choice
from compiler.ast import flatten
from multiprocessing.connection import Client
from array import array
from argparse import ArgumentParser
from xmlrpclib import ServerProxy
from time import sleep
from hmi_server.abstract_server import HMIResult

class RosServer(AbstractHMIServer):

    def __init__(self, ros_name, ip):
        super(RosServer, self).__init__(ros_name)
        self._xmlrpc_proxy  = ServerProxy("http://%s:8000" % ip)

    def _determine_answer(self, description, spec, choices, is_preempt_requested):

        # RPC request to server -- For now just wait 10 seconds
        result = self._xmlrpc_proxy.recognize(spec, choices, 10.0)

        rospy.loginfo("WSR result: %s", result)
        if result:
            if isinstance(result["result"], list):
                flatten_result = [e for e in flatten(result["result"]) if isinstance(e, str)]
                result["result"] = " ".join(flatten_result)
        else:
            result = {}
            result["result"] = ""
            result["choices"] = {}

        rospy.loginfo("Parsed result: %s", result)

        return HMIResult(raw_result=result["result"], results=result["choices"])


if __name__ == '__main__':

    rospy.init_node('ros_speech_bridge_xml_rpc')

    try:
        if rospy.has_param('~ip'):
            ip = rospy.get_param('~ip')
            server = RosServer(rospy.get_name(), ip)
            rospy.loginfo("SpeechRosServer: initialized [connecting to server on ip %s]", ip)
            rospy.spin()
        else:
            rospy.logerr("SpeechRosServer: no server ip set; please specify the local 'ip' parameter")
    except rospy.ROSInterruptException:
        pass
